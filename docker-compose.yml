# docker-compose.yml - Agentic AI Pipeline with Docker Model Runner GPU Support

services:
  # GPU-accelerated model server - driver compatibility handled
  triton-server:
    image: nvcr.io/nvidia/tritonserver:24.01-py3
    container_name: triton-server
    command: ["tritonserver", "--model-repository=/models", "--exit-on-error=false", "--log-verbose=0"]
    ports:
      - "8000:8000"  # Force specific port mapping
      - "8001:8001"  
      - "8002:8002"
    volumes:
      - ./triton-server/model-repository:/models:ro
    environment:
      - NVIDIA_VISIBLE_DEVICES=${NVIDIA_VISIBLE_DEVICES:-none}
    networks:
      - ai-pipeline
    healthcheck:
      test: ["CMD", "curl", "-sf", "http://localhost:8000/v2/health/ready"]
      interval: 15s
      timeout: 5s
      retries: 10
      start_period: 40s
    restart: unless-stopped

  # Preprocessing agent
  preprocessor-agent:
    build: ./agents/preprocessor
    container_name: preprocessor-agent
    ports:
      - "8081:8080"
    environment:
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    networks:
      - ai-pipeline
    healthcheck:
      test: ["CMD", "curl", "-sf", "http://localhost:8080/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Model offload coordinator with Docker Model Runner awareness
  coordinator-agent:
    build: ./agents/coordinator
    container_name: coordinator-agent
    ports:
      - "8090:8080"
    environment:
      - TRITON_URL=${TRITON_URL:-triton-server:8000}
      - PREPROCESSOR_URL=${PREPROCESSOR_URL:-preprocessor-agent:8080}
      - AGGREGATOR_URL=${AGGREGATOR_URL:-aggregator-agent:8080}
      - OFFLOAD_MODE=${OFFLOAD_MODE:-auto}
      - OFFLOAD_ENABLED=${OFFLOAD_ENABLED:-false}
      - DOCKER_MODEL_RUNNER_ENABLED=${DOCKER_MODEL_RUNNER_ENABLED:-true}
      - REMOTE_DOCKER_MODEL_RUNNER_URL=${REMOTE_DOCKER_MODEL_RUNNER_URL:-}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    volumes:
      - ./test-data:/app/test-data:ro
    networks:
      - ai-pipeline
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 15s
      timeout: 5s
      retries: 10
      start_period: 20s
    restart: unless-stopped
    depends_on:
      - triton-server
      - preprocessor-agent
      - aggregator-agent

  # Results aggregator agent
  aggregator-agent:
    build: ./agents/aggregator
    container_name: aggregator-agent
    ports:
      - "8082:8080"
    environment:
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    networks:
      - ai-pipeline
    healthcheck:
      test: ["CMD", "curl", "-sf", "http://localhost:8080/health"]
      interval: 15s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Monitoring and metrics
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    networks:
      - ai-pipeline
    profiles:
      - monitoring

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana-storage:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - ai-pipeline
    profiles:
      - monitoring

networks:
  ai-pipeline:

volumes:
  grafana-storage: